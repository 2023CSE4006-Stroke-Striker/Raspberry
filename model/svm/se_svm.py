# -*- coding: utf-8 -*-
"""SE_SVM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1soRTlW9U2IgjCMzf-HybVnm4ut8X5DJ3
"""

import pandas as pd
import os
from skimage.transform import resize
from skimage.io import imread
import numpy as np
import joblib
import matplotlib.pyplot as plt
from sklearn import svm
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.metrics import classification_report

Categories=['noStroke','stroke']
flat_data_arr=[] #input array
target_arr=[] #output array
num = 0
datadir='/content/drive/MyDrive/main'
#path which contains all the categories of images
for i in Categories:

	print(f'loading... category : {i}')
	path=os.path.join(datadir,i)
	for img in os.listdir(path):
		if num >= 250:
			break
		img_array=imread(os.path.join(path,img))
		img_resized=resize(img_array,(150,150,3))
		flat_data_arr.append(img_resized.flatten())
		target_arr.append(Categories.index(i))
		num = num + 1

	print(f'loaded category:{i} successfully')
	num = 0
flat_data=np.array(flat_data_arr)
target=np.array(target_arr)

target

#dataframe
df=pd.DataFrame(flat_data)
df['Target']=target
df.shape

#input data
x=df.iloc[:,:-1]
#output data
y=df.iloc[:,-1]

x

y

# Splitting the data into training and testing sets
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.20,
											random_state=77,
											stratify=y)

x_train, y_train

# Defining the parameters grid for GridSearchCV
param_grid={'C':[0.1,1,10,100],
			'gamma':[0.0001,0.001,0.1,1],
			'kernel':['rbf','poly']}

# Creating a support vector classifier
svc=svm.SVC(probability=True)

# Creating a model using GridSearchCV with the parameters grid
model=GridSearchCV(svc,param_grid)

# Training the model using the training data
model.fit(x_train,y_train)

# Testing the model using the testing data
y_pred = model.predict(x_test)

# Calculating the accuracy of the model
accuracy = accuracy_score(y_pred, y_test)

# Print the accuracy of the model
print(f"The model is {accuracy*100}% accurate")

print(classification_report(y_test, y_pred, target_names=['noStroke', 'stroke']))

joblib.dump(model, "/content/drive/MyDrive/svm_stroke_classification")

